# -*- coding: utf-8 -*-
"""CLEANED PythonNNFromScratch.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1O477okPsigah08kZOUHVdV6mShl4QKu-
"""



"""Activations"""

import numpy as np
# activation function and its derivative
def tanh(x):
    return np.tanh(x)

def tanh_prime(x):
    return 1-np.tanh(x)**2

def softmax(x):
    exp_x = np.exp(x - np.max(x, axis=-1, keepdims=True))  # Subtract max for numerical stability
    return exp_x / np.sum(exp_x, axis=-1, keepdims=True)

def softmax_prime(x):
    s = softmax(x)
    return s * (1 - s)

import numpy as np

def sigmoid(z):
    return 1 / (1 + np.exp(-z))

def sigmoid_prime(z):
    return sigmoid(z) * (1 - sigmoid(z))

def relu(x):
    return np.maximum(0, x)

def relu_prime(x):
    return np.where(x <= 0, 0, 1)

def leaky_relu(x, alpha=0.01):
    return np.maximum(alpha * x, x)

def leaky_relu_prime(x, alpha=0.01):
    return np.where(x >= 0, 1, alpha)



"""Losses

"""

# loss function and its derivative
def mse(y_true, y_pred):
    return np.mean(np.power(y_true-y_pred, 2))

def mse_prime(y_true, y_pred):
    return 2*(y_pred-y_true)/y_true.size

def categorical_cross_entropy(y_true, y_pred):
    epsilon = 1e-15
    y_pred = np.clip(y_pred, epsilon, 1 - epsilon)
    return -np.sum(y_true * np.log(y_pred))

def categorical_cross_entropy_prime(y_true, y_pred):
    epsilon = 1e-15
    y_pred = np.clip(y_pred, epsilon, 1 - epsilon)
    return -y_true / y_pred

"""Base Class"""

class Layer:
    def __init__(self):
        self.input = None
        self.output = None

    # computes the output Y of a layer for a given input X
    def forward_propagation(self, input):
        raise NotImplementedError

    # computes dE/dX for a given dE/dY (and update parameters if any)
    def backward_propagation(self, output_error, learning_rate):
        raise NotImplementedError

"""Network Class"""

import time

class Network:
    def __init__(self):
        self.layers = []
        self.loss = None
        self.loss_prime = None

    # add layer to network
    def add(self, layer):
        self.layers.append(layer)

    # set loss to use
    def use(self, loss, loss_prime):
        self.loss = loss
        self.loss_prime = loss_prime

    # predict output for given input
    def predict(self, input_data):
        # sample dimension first
        samples = len(input_data)
        result = []

        # run network over all samples
        for i in range(samples):
            # forward propagation
            output = input_data[i]
            for layer in self.layers:
                output = layer.forward_propagation(output)
            result.append(output)

        return result

    # train the network
    def fit(self, x_train, y_train, epochs, learning_rate):
        # sample dimension first
        samples = len(x_train)

        # training loop
        for i in range(epochs):
            err = 0
            start_time_epoch = time.time()
            for j in range(samples):
                start_time = time.time()
                # forward propagation
                output = x_train[j]
                for layer in self.layers:

                    output = layer.forward_propagation(output)

                # compute loss (for display purpose only)
                print('\rEpoch ' + str(i + 1) + '/' + str(epochs) + ' Sample ' + str(j + 1) + '/' + str(samples) + '   Output:' + str(output) + ' Y_Train[j]: ' + str(y_train[j]) + ' ---')
                err += self.loss(y_train[j], output)

                # backward propagation
                error = self.loss_prime(y_train[j], output)
                for layer in reversed(self.layers):
                    error = layer.backward_propagation(error, learning_rate)

                print('\rEpoch ' + str(i + 1) + '/' + str(epochs) + ' Sample ' + str(j + 1) + '/' + str(samples) + '   Time: ' + str(time.time() - start_time) + 's')

            # calculate average error on all samples
            err /= samples
            time_for_epoch =  time.time() - start_time_epoch
            print('epoch %d/%d   error=%f' % (i+1, epochs, err))
            print('\t time for time=' + str(time_for_epoch))

"""FC Layer"""

import numpy as np

# inherit from base class Layer
class FCLayer(Layer):
    # input_size = number of input neurons
    # output_size = number of output neurons
    def __init__(self, input_size, output_size):
        self.weights = np.random.rand(input_size, output_size) - 0.5
        self.bias = np.random.rand(1, output_size) - 0.5

    # returns output for a given input
    def forward_propagation(self, input_data):
        self.input = input_data
        self.output = np.dot(self.input, self.weights) + self.bias
        return self.output

    # computes dE/dW, dE/dB for a given output_error=dE/dY. Returns input_error=dE/dX.
    def backward_propagation(self, output_error, learning_rate):
        input_error = np.dot(output_error, self.weights.T)
        weights_error = np.dot(self.input.T, output_error)
        # dBias = output_error

        # update parameters
        self.weights -= learning_rate * weights_error
        self.bias -= learning_rate * output_error
        return input_error

"""Conv Layer

"""

import numpy as np

"""Activation Layer"""

# inherit from base class Layer
class ActivationLayer(Layer):
    def __init__(self, activation, activation_prime):
        self.activation = activation
        self.activation_prime = activation_prime

    # returns the activated input
    def forward_propagation(self, input_data):
        self.input = input_data
        self.output = self.activation(self.input)
        return self.output

    # Returns input_error=dE/dX for a given output_error=dE/dY.
    # learning_rate is not used because there is no "learnable" parameters.
    def backward_propagation(self, output_error, learning_rate):
        return self.activation_prime(self.input) * output_error

"""Flatten Layer

"""

# inherit from base class Layer
class FlattenLayer(Layer):
    # returns the flattened input
    def forward_propagation(self, input_data):
        self.input = input_data
        self.output = input_data.flatten().reshape((1,-1))
        return self.output

    # Returns input_error=dE/dX for a given output_error=dE/dY.
    # learning_rate is not used because there is no "learnable" parameters.
    def backward_propagation(self, output_error, learning_rate):
        return output_error.reshape(self.input.shape)


net = Network()
net.add(FCLayer(expected_params['n_features'], 12000))
net.add(ActivationLayer(tanh, tanh_prime))
net.add(FCLayer(12000, 8000))
net.add(ActivationLayer(tanh, tanh_prime))
net.add(FCLayer(8000, 2500))
net.add(ActivationLayer(tanh, tanh_prime))
net.add(FCLayer(2500, 1000))
net.add(ActivationLayer(tanh, tanh_prime))
net.add(FCLayer(1000, 500))
net.add(ActivationLayer(tanh, tanh_prime))
net.add(FCLayer(500, 250))
net.add(ActivationLayer(tanh, tanh_prime))
net.add(FCLayer(250, expected_params['centers']))
net.add(ActivationLayer(softmax, softmax_prime))

net.use(categorical_cross_entropy, categorical_cross_entropy_prime)
epochs = 3
# y_train.shape

# len(X_train[0])

net.fit(X_train, y_train, epochs, learning_rate=0.1)